
type Lecture{
    id: ID!
    teacher: User!
    day_of_week: Int!
    department_id: Int!
    lecture_number: Int!
    subject_name: String!
    attendance: [Attendance!]
}


input LectureCreationInput{
    teacher_id: ID!
    day_of_week: Int!
    department_id: ID!
    lecture_number: Int!
    subject_name: String!
}

input LectureUpdationInput{
    id: ID!
    teacher_id: ID!
    subject_name: String!
    lecture_number: Int!
}


extend type Query {
    lecture(id: ID @eq): Lecture @find
    depLectures(departmentId: ID!): [Lecture!] @field(resolver: "App\\GraphQL\\Resolvers\\Queries\\LectureQueryResolver@findAllByDepartmenId")
    depTeacherLectures(departmentId: ID!, teacherId: ID!): [Lecture!] @field(resolver: "App\\GraphQL\\Resolvers\\Queries\\LectureQueryResolver@findAllByDepartmendIdAndTeacherId")
    teacherLectures(teacherId: ID!): [Lecture!] @field(resolver: "App\\GraphQL\\Resolvers\\Queries\\LectureQueryResolver@findAllByTeacherId")
    dayOfWeekDepLectures(departmentId: ID!, dayOfWeek: Int!): [Lecture!] @field(resolver: "App\\GraphQL\\Resolvers\\Queries\\LectureQueryResolver@findAllByDepartmentAndDayOfWeek")
}

type Mutation {
    createLectures(input: [LectureCreationInput!]): GenericMessage @field(resolver: "App\\GraphQL\\Resolvers\\Mutations\\LectureMutationResolver@bulkCreate")
}

